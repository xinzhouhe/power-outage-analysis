{"version":3,"file":"262.primer_spec_plugin.min.js","mappings":"kFAAO,IAAIA,EAqBJ,SAASC,EAAeC,EAAYC,GACvC,MAAMC,EAAQ,IAAIC,KAClB,QAAID,EAAME,WAAaJ,EAAWK,OAG9BH,EAAME,aAAeJ,EAAWK,OAChCH,EAAMI,UAAYN,EAAWO,MAI7BL,EAAME,WAAaH,EAAWI,SAG9BH,EAAME,WAAaH,EAAWI,OAG3BH,EAAMI,UAAYL,EAAWM,MACxC,CCtCO,SAASC,EAA0BC,EAAUC,GAChD,MAAMC,EAAc,IAAIC,IAAIC,OAAOC,SAASC,MAC5CJ,EAAYK,aAAaC,IAAI,UAAUR,IAAY,KACnDS,QAAQC,KAAK,GAAGT,MAAaC,EAAYS,WAC7C,C,qCDHA,SAAWtB,GACPA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAgB,SAAI,GAAK,WAC/BA,EAAMA,EAAa,MAAI,GAAK,QAC5BA,EAAMA,EAAa,MAAI,GAAK,QAC5BA,EAAMA,EAAW,IAAI,GAAK,MAC1BA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAiB,UAAI,GAAK,YAChCA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAgB,SAAI,IAAM,WAChCA,EAAMA,EAAgB,SAAI,IAAM,UACnC,CAbD,CAaGA,IAAUA,EAAQ,CAAC,IEMtB,MACMuB,EADa,CAAC,YAAa,yBACEC,QAAQb,GCnBpC,SAA0BA,GAC7B,GAAII,OAAOU,iBAAiBC,aACxB,OAAO,EAEX,MAAMC,EAsBV,SAAiChB,GAC7B,MAAMiB,EAAQb,OAAOC,SAASa,OAAOD,MAAM,IAAIE,OAAO,UAAUnB,cAChE,OAAIiB,EACoB,MAAbA,EAAM,GAEV,IACX,CA5B8BG,CAAwBpB,GAClD,GAA0B,OAAtBgB,EACA,OAAOA,EAEX,OAAQhB,GACJ,IAAK,YAMD,OAHIV,EAAe,CAAEM,MAAOP,EAAMgC,SAAUvB,KAAM,GAAK,CAAEF,MAAOP,EAAMgC,SAAUvB,KAAM,MAClFC,EAA0BC,EAAU,mGAEjCV,EAAe,CAAEM,MAAOP,EAAMiC,QAASxB,KAAM,IAAM,CAAEF,MAAOP,EAAMgC,SAAUvB,KAAM,IAC7F,IAAK,wBAMD,OAHIR,EAAe,CAAEM,MAAOP,EAAMkC,MAAOzB,KAAM,GAAK,CAAEF,MAAOP,EAAMkC,MAAOzB,KAAM,MAC5EC,EAA0BC,EAAU,qHAEjCV,EAAe,CAAEM,MAAOP,EAAMmC,MAAO1B,KAAM,IAAM,CAAEF,MAAOP,EAAMkC,MAAOzB,KAAM,IAE5F,OAAO,CACX,CDNwD2B,CAAiBzB,KAAW0B,KAAK1B,GEZlF2B,eAA0B3B,GAC7B,IAAI4B,EAAS,KACb,OAAQ5B,GACJ,IAAK,YACD4B,SAAgB,8BAAsCC,QACtD,MACJ,IAAK,wBACDD,SAAgB,8BAAkDC,QAG1E,OAAOD,CACX,CFCsGE,CAAW9B,KAC1G2B,eAAeI,EAAeC,GACjC,MAAMC,QAAgBC,QAAQC,IAAIvB,SAC5BsB,QAAQC,IAAIF,EAAQP,KAAIC,MAAOC,UAC3BA,IAASI,GAAM,IAE7B,C","sources":["webpack:///./conditional_plugins/utils/is_today_in_range.ts","webpack:///./conditional_plugins/utils/print_enabling_url_to_console.ts","webpack:///./conditional_plugins/conditional_plugins.ts","webpack:///./conditional_plugins/should_load_plugin.ts","webpack:///./conditional_plugins/load_plugin.ts"],"sourcesContent":["export var Month;\n(function (Month) {\n    Month[Month[\"JANUARY\"] = 0] = \"JANUARY\";\n    Month[Month[\"FEBRUARY\"] = 1] = \"FEBRUARY\";\n    Month[Month[\"MARCH\"] = 2] = \"MARCH\";\n    Month[Month[\"APRIL\"] = 3] = \"APRIL\";\n    Month[Month[\"MAY\"] = 4] = \"MAY\";\n    Month[Month[\"JUNE\"] = 5] = \"JUNE\";\n    Month[Month[\"JULY\"] = 6] = \"JULY\";\n    Month[Month[\"AUGUST\"] = 7] = \"AUGUST\";\n    Month[Month[\"SEPTEMBER\"] = 8] = \"SEPTEMBER\";\n    Month[Month[\"OCTOBER\"] = 9] = \"OCTOBER\";\n    Month[Month[\"NOVEMBER\"] = 10] = \"NOVEMBER\";\n    Month[Month[\"DECEMBER\"] = 11] = \"DECEMBER\";\n})(Month || (Month = {}));\n/**\n * Return a boolean indicating whether today's date is between the dates\n * `lowerBound` (inclusive) and `upperBound` (exclusive).\n *\n * KNOWN LIMITATION: Doesn't work across years (for instance, around New Year).\n */\nexport function isTodayInRange(lowerBound, upperBound) {\n    const today = new Date();\n    if (today.getMonth() < lowerBound.month) {\n        return false;\n    }\n    if (today.getMonth() === lowerBound.month &&\n        today.getDate() < lowerBound.date) {\n        return false;\n    }\n    // At this point, we're beyond the lower bound.\n    if (today.getMonth() > upperBound.month) {\n        return false;\n    }\n    if (today.getMonth() < upperBound.month) {\n        return true;\n    }\n    return today.getDate() < upperBound.date;\n}\n","export function printEnablingURLToConsole(pluginId, message) {\n    const enabled_url = new URL(window.location.href);\n    enabled_url.searchParams.set(`enable_${pluginId}`, '1');\n    console.info(`${message}\\n`, enabled_url.toString());\n}\n","/**\n * Conditional plugins are loaded asynchronously and are intentionally\n * isolated from the rest of Primer Spec. This is because this conditional\n * plugin framework was designed to build temporary pranks and jokes! (We don't\n * want these jokes to affect the page load time and the spec-reading\n * experience.)\n *\n * Plugins run based on conditions defined in the `shouldLoadPlugin()` method.\n * They can also be force-enabled by inserting\n * `?enable_<plugin_id>=1` in the URL.\n */\nimport { shouldLoadPlugin } from './should_load_plugin';\nimport { loadPlugin } from './load_plugin';\n/**\n * When adding a new Plugin:\n * 1. Add the plugin definition to `./plugins/[your-plugin].plugin.ts`\n * 2. Choose a plugin ID, then add it to this list\n * 3. Add a condition to `shouldLoadPlugin()` for this plugin ID\n * 4. Update `loadPlugin()` to load the plugin definition from (1)\n */\nconst PLUGIN_IDS = ['halloween', 'april_fools_languages'];\nconst pluginsPromises = PLUGIN_IDS.filter((pluginId) => shouldLoadPlugin(pluginId)).map((pluginId) => loadPlugin(pluginId));\nexport async function executePlugins(input) {\n    const plugins = await Promise.all(pluginsPromises);\n    await Promise.all(plugins.map(async (plugin) => {\n        await plugin?.(input);\n    }));\n}\n","import { isTodayInRange, Month } from './utils/is_today_in_range';\nimport { printEnablingURLToConsole } from './utils/print_enabling_url_to_console';\nexport function shouldLoadPlugin(pluginId) {\n    if (window.PrimerSpecConfig.disableJokes) {\n        return false;\n    }\n    const forceEnableOption = pluginForceEnableOption(pluginId);\n    if (forceEnableOption !== null) {\n        return forceEnableOption;\n    }\n    switch (pluginId) {\n        case 'halloween':\n            // Console message if we are *just* past the Halloween-mode end-date.\n            // From November 5 until November 15.\n            if (isTodayInRange({ month: Month.NOVEMBER, date: 5 }, { month: Month.NOVEMBER, date: 16 })) {\n                printEnablingURLToConsole(pluginId, \"ðŸ¤« Psst... It's well past halloween, but you can re-enable halloween mode by clicking this url:\");\n            }\n            return isTodayInRange({ month: Month.OCTOBER, date: 25 }, { month: Month.NOVEMBER, date: 5 });\n        case 'april_fools_languages':\n            // Console message if we are *just* past the April Fools end-date.\n            // From April 4 until April 13.\n            if (isTodayInRange({ month: Month.APRIL, date: 4 }, { month: Month.APRIL, date: 13 })) {\n                printEnablingURLToConsole(pluginId, \"ðŸ¤« Psst... It's well past April Fools, but you can re-enable the April Fools Language prank by clicking this url:\");\n            }\n            return isTodayInRange({ month: Month.MARCH, date: 29 }, { month: Month.APRIL, date: 4 });\n    }\n    return false;\n}\nfunction pluginForceEnableOption(pluginId) {\n    const match = window.location.search.match(new RegExp(`enable_${pluginId}=([0|1])`));\n    if (match) {\n        return match[1] === '1';\n    }\n    return null;\n}\n","/**\n * Given a plugin ID, lazy-load the appropriate JS module containing the plugin\n * definition and return the plugin.\n *\n * Notice that we use the dynamic `import()` syntax. Webpack identifies this as\n * an opportunity to split the JS bundle, hence decreasing the size of the main\n * Primer Spec JS bundle. Additionally, we won't download the JS code for all\n * plugins, only the ones that need to run.\n */\nexport async function loadPlugin(pluginId) {\n    let plugin = null;\n    switch (pluginId) {\n        case 'halloween':\n            plugin = (await import('./plugins/halloween.plugin')).default;\n            break;\n        case 'april_fools_languages':\n            plugin = (await import('./plugins/april_fools_languages.plugin')).default;\n            break;\n    }\n    return plugin;\n}\n"],"names":["Month","isTodayInRange","lowerBound","upperBound","today","Date","getMonth","month","getDate","date","printEnablingURLToConsole","pluginId","message","enabled_url","URL","window","location","href","searchParams","set","console","info","toString","pluginsPromises","filter","PrimerSpecConfig","disableJokes","forceEnableOption","match","search","RegExp","pluginForceEnableOption","NOVEMBER","OCTOBER","APRIL","MARCH","shouldLoadPlugin","map","async","plugin","default","loadPlugin","executePlugins","input","plugins","Promise","all"],"sourceRoot":""}